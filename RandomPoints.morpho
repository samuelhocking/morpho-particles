import constants

fn GenRandomRectangle(numPts, xBounds=nil, yBounds=nil, zBounds=nil) {
    var ptsArr = []
    var params = [
        xBounds,
        yBounds,
        zBounds
    ]
    var bounds = []
    for (x in params) {
        if (x != nil) {
            bounds.append(x)
        } else {
            bounds.append([0,0])
        }
    }
    var ranges = []
    for (x in bounds) {
        ranges.append(x[1]-x[0])
    }
    for (i in 1..numPts) {
        ptsArr.append(Matrix([
            bounds[0][0] + ranges[0]*random(),
            bounds[1][0] + ranges[1]*random(),
            bounds[2][0] + ranges[2]*random()
            ]))
    }
    return ptsArr
}
fn GenParametrizedLine(function, tStart=0, tEnd=1, numPts=10) {
    var func = function
    var ptsArr = []
    for (t in 0...numPts) {
        ptsArr.append(func(tStart + t*(tEnd-tStart)/(numPts-1)))
    }
    return ptsArr
}

fn GenParametrizedRectangle(tFunction, sFunction, tStart=0, tEnd=1, sStart=0, sEnd=1, numTPts=10, numSPts=10) {
    var tFunc = tFunction
    var sFunc = sFunction
    var ptsArr = []
    for (t in 0...numTPts) {
        for (s in 0...numSPts) {
            ptsArr.append(tFunc(tStart + t*(tEnd-tStart)/(numTPts-1)) + sFunc(sStart + s*(sEnd-sStart)/(numSPts-1)))
        }
    }
    return ptsArr
}

fn GenParametrizedBall(r=1, usteps=5, vsteps=5, wsteps=5) {
    // u: steps along longitudinal arc
    // v: steps along latitudinal arc
    // w: steps along radius
    var ptsArr = []
    var x, y, z
    for (var u=0; u<=usteps; u+=1) {
        for (var v=0; v<vsteps; v+=1) {
            for (var w=0; w<=wsteps; w+=1) {
                x = (w/wsteps*r)*sin(u/usteps*Pi)*cos(v/vsteps*2*Pi)
                y = (w/wsteps*r)*sin(u/usteps*Pi)*sin(v/vsteps*2*Pi)
                z = (w/wsteps*r)*cos(u/usteps*Pi)
                ptsArr.append(Matrix([x,y,z]))
            }
        }
    }
    return ptsArr
}

fn randSign() {
    var x = random()
    if (x >= 0.5) {
        return 1
    } else {
        return -1
    }
}

fn GenRandomSphere(numPts, r=1) {
    var ptsArr = []
    for (i in 1..numPts) {
        var x = min(max(-r+2*r*random(),-r),r)
        var y = min(max(-r+2*r*random(),-r),r)
        var z = min(max(randSign()*sqrt(r^2 -(x^2+y^2)),-r),r)
        ptsArr.append(Matrix([x,y,z]))
    }
    return ptsArr
}

fn GenRandomBall(numPts, r=1) {
    var ptsArr = []
    for (i in 1..numPts) {
        var r = r*random()
        var x = min(max(-r+2*r*random(),-r),r)
        var y = min(max(-r+2*r*random(),-r),r)
        var z = min(max(randSign()*sqrt(r^2 -(x^2+y^2)),-r),r)
        ptsArr.append(Matrix([x,y,z]))        
    }
    return ptsArr
}