// Demo of particle projection and movement
// By: Sam Hocking

import meshtools
import plot
import optimize
import "Particles.morpho"
import "RandomPoints.morpho"

//Sphere
// var mesh = Mesh("sphere_194_vertices.mesh")
// var mesh = Mesh("sphere_770_vertices.mesh")

// Plane
// var verts = [
//     [-1,1,0],
//     [0,1,0],
//     [1,1,0],
//     [-1,0,0],
//     [0,0,0],
//     [1,0,0],
//     [-1,-1,0],
//     [0,-1,0],
//     [1,-1,0]
// ]
// var edges = [
//     [0,1],
//     [1,2],
//     [0,3],
//     [0,4],
//     [1,4],
//     [1,5],
//     [2,5],
//     [3,4],
//     [4,5],
//     [3,6],
//     [3,7],
//     [4,7],
//     [4,8],
//     [5,8],
//     [6,7],
//     [7,8]
// ]
// var faces = [
//     [0,1,4],
//     [0,3,4],
//     [1,2,5],
//     [1,4,5],
//     [3,4,7],
//     [3,6,7],
//     [4,5,8],
//     [4,7,8]
// ]
// var mb = MeshBuilder()
// for (v in verts) mb.addvertex(v)
// for (e in edges) mb.addedge(e)
// for (f in faces) mb.addface(f)
// var plane = mb.build()
// var mesh = plane

//Tetrahedron
// var verts = [[0, 0.57735027, -0.25],[-0.5,-0.28867513,-0.25],[0.5,-0.28867513,-0.25],[0,0,0.5]]
// var edges = [[0,1],[0,2],[1,2],[0,3],[1,3],[2,3]]
// var faces = [[0,1,2],[0,1,3],[1,2,3],[0,2,3]]
// var mb = MeshBuilder()
// for (v in verts) mb.addvertex(v)
// for (e in edges) mb.addedge(e)
// for (f in faces) mb.addface(f)
// var tetra = mb.build()
// var mesh = tetra

// Torus
var r=1
var a=0.35
var impl = ImplicitMeshBuilder(fn (x,y,z) (x^2+y^2+z^2+r^2-a^2)^2 - 4*r^2*(x^2+y^2))
var torus = impl.build(start=Matrix([1,0,0.5]), stepsize=0.25, maxiterations=400)
torus.addgrade(1)
var mesh = torus

// generate random point cloud
var ptsArr = GenRandomRectangle(20000, xBounds=[-2,2], yBounds=[-2,2], zBounds=[-2,2])

var p = Particles(mesh)
p.project(ptsArr)
print("done projecting")

var e100 = Matrix([1,0,0])
var e010 = Matrix([0,1,0])
var e001 = Matrix([0,0,1])

p.moveAll(ConstantForce((1*e100) + (0.5*e001)), quiet=true)
print("done moving")

var pp = ParticlePlotter(p)
pp.plot(grade=[2], projectedPoints=true, movedPoints=true)