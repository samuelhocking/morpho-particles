// Demo of particle projection and movement
// By: Sam Hocking

import meshtools
import plot
import optimize
import "Particles.morpho"
import "RandomPoints.morpho"

//Sphere
// var cube = PolyhedronMesh(
//     [[-0.5,-0.5,-0.5],
//      [-0.5,0.5,-0.5],
//      [0.5,-0.5,-0.5],
//      [0.5,0.5,-0.5],
//      [-0.5,-0.5,0.5],
//      [-0.5,0.5,0.5],
//      [0.5,-0.5,0.5],
//      [0.5,0.5,0.5]],
//     [[0,1,3,2],
//      [0,1,5,4],
//      [2,3,7,6],
//      [1,3,7,5],
//      [0,2,6,4],
//      [4,5,7,6]])
// cube.addgrade(1)
// var problem = OptimizationProblem(cube)
// // surface tension
// var la=Area()
// // volume constraint
// var lv = VolumeEnclosed()
// problem.addenergy(la)
// problem.addconstraint(lv)

// var leq=EquiElement()
// var reg = OptimizationProblem(cube)
// reg.addenergy(leq)
// var ropt = ShapeOptimizer(reg, cube)

// var opt = ShapeOptimizer(problem, cube)
// opt.stepsize = 0.001

// var refmax = 3
// for (refiter in 1..refmax) {
//     for (i in 1..10) {
//         print "-Regularize"
//         ropt.linesearch(3)
//         equiangulate(cube)
//         opt.relax(100)
//     }
//     if (refiter==refmax) break
//     var mr=MeshRefiner([cube])
//     var refmap=mr.refine()
//     for (el in [problem, opt, reg, ropt]) el.update(refmap)
//     cube=refmap[cube]
// }
// var mesh = cube

// Plane
// var verts = [
//     [-1,1,0],
//     [0,1,0],
//     [1,1,0],
//     [-1,0,0],
//     [0,0,0],
//     [1,0,0],
//     [-1,-1,0],
//     [0,-1,0],
//     [1,-1,0]
// ]
// var edges = [
//     [0,1],
//     [1,2],
//     [0,3],
//     [0,4],
//     [1,4],
//     [1,5],
//     [2,5],
//     [3,4],
//     [4,5],
//     [3,6],
//     [3,7],
//     [4,7],
//     [4,8],
//     [5,8],
//     [6,7],
//     [7,8]
// ]
// var faces = [
//     [0,1,4],
//     [0,3,4],
//     [1,2,5],
//     [1,4,5],
//     [3,4,7],
//     [3,6,7],
//     [4,5,8],
//     [4,7,8]
// ]
// var mb = MeshBuilder()
// for (v in verts) mb.addvertex(v)
// for (e in edges) mb.addedge(e)
// for (f in faces) mb.addface(f)
// var plane = mb.build()
// var mesh = plane

//Tetrahedron
// var verts = [[0, 0.57735027, -0.25],[-0.5,-0.28867513,-0.25],[0.5,-0.28867513,-0.25],[0,0,0.5]]
// var edges = [[0,1],[0,2],[1,2],[0,3],[1,3],[2,3]]
// var faces = [[0,1,2],[0,1,3],[1,2,3],[0,2,3]]
// var mb = MeshBuilder()
// for (v in verts) mb.addvertex(v)
// for (e in edges) mb.addedge(e)
// for (f in faces) mb.addface(f)
// var tetra = mb.build()
// var mesh = tetra

// Torus
var r=1
var a=0.35
var impl = ImplicitMeshBuilder(fn (x,y,z) (x^2+y^2+z^2+r^2-a^2)^2 - 4*r^2*(x^2+y^2))
var torus = impl.build(start=Matrix([1,0,0.5]), stepsize=0.25, maxiterations=400)
torus.addgrade(1)
var mesh = torus

// generate random point cloud
var ptsArr = GenRandomRectangle(1000, xBounds=[-2,2], yBounds=[-2,2], zBounds=[-2,2])

var p = Particles(mesh)
p.project(ptsArr)

var projPts = []
for (x in p.projectedPoints) {
    projPts.append(x.particleinfo[0])
}

var e100 = Matrix([1,0,0])
var e010 = Matrix([0,1,0])
var e001 = Matrix([0,0,1])

// p.move(1*(1*e100), quiet=true)
// p.move(1*(1*e010), quiet=true)
// p.move(1*(1*e001), quiet=true)
p.moveAll((0.5*e001) - (0.25*e010) + (0.25*e001), quiet=true)

var movedPts = []
for (x in p.movedPoints) {
    movedPts.append(x.particleinfo[0])
}

var gMesh = plotmesh(mesh, grade=[2])
var gCombined = gMesh
var gProjPt
for (pt in projPts) {
    gProjPt = Graphics()
    gProjPt.display(Sphere(pt, 0.02, color=[255,0,0]))
    gCombined += gProjPt.clone()
}
var gMovedPt
var i = 0
for (pt in movedPts) {
    gMovedPt = Graphics()
    gMovedPt.display(Sphere(pt, 0.02, color=[0,255,0]))
    gCombined += gMovedPt.clone()
    i += 1
    print "Rendering: ${i}/${movedPts.count()}"
}
Show(gCombined)