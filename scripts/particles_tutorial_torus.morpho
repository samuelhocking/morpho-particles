import meshtools
import plot
import optimize

import "../utils/morpho-particles.morpho" 
import "../utils/RandomPoints.morpho"

// 1. Build substrate mesh
var r=1 
var a=0.35
var impl = ImplicitMeshBuilder(
    fn (x,y,z) (x^2+y^2+z^2+r^2-a^2)^2 - 4*r^2*(x^2+y^2)
    )
var torus = impl.build(
    start=Matrix([1,0,0.5]),
    stepsize=0.25,
    maxiterations=400
    )
torus.addgrade(1)
var mesh = torus

// 2. Initialize Substrate object with substrate mesh argument
var s = Substrate(mesh)

// 3. Build particle mesh
var ptsArr = GenRandomRectangle(
    100,
    xBounds=[-2,0],
    yBounds=[-2,0],
    zBounds=[-2,2]
    )
var mbb = MeshBuilder()
for (x in ptsArr) mbb.addvertex(x)
var particleMesh = mbb.build()

// 4. Initialize Particles object with particle mesh argument
var p = Particles(particleMesh)

// 5. Project particles onto substrate (Particles object method, Substrate object argument)
p.project(s)

// 6. Define Force object
var e1 = Matrix([1,0,0])
var e2 = Matrix([0,1,0])
var e3 = Matrix([0,0,1])
var f = ConstantForce(1.5*e1+1.5*e2)
// var f = ConstantForce(-1*e3)

// 7. Move particles along substrate by applying the force (Particles object method, Substrate and Force object arguments)
p.moveAll(s, f)

// 8. Invoke ParticlePlotter object
var pp = ParticlePlotter()

// 9. Plot
pp.plot(p, s, substrateGrade=[2], projectablePoints=true, projectedPoints=true, points=true)