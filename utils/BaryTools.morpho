// Barycentric Coordinate Tools
// By: Sam Hocking

import "../utils/LinAlgTools.morpho"

// For a face with vertices v0, v1, and v2, we want to define a new coordinate system relative to those vertices
// First axis defined by unit direction from v0 to v1, ut0
// Second axis defined by unit direction from v0 to v2, ut1
// Third axis is defined by the unit surface normal, which is the normalized cross product ut0 x ut1 = ut2
//   (doesn't matter which orientation since the coordinate for particles on the face will be zero)
//   (we just need a linearly independent third axis)
// Transformation matrix T: B->C where B are barycentric coordinates lamda0, lambda1, lambda2 and C are certesian coordinates
//   given by:      [ |   |   | ]
//              T = [ut0 ut1 ut2]
//                  [ |   |   | ]
// The inverse transformation is T-1: C->B

fn MakeT(v0, v1, v2) {
    var t0 = v1 - v0
    var t1 = v2 - v0
    var t2 = cross(t0, t1)
    var ut0 = t0/t0.norm()
    var ut1 = t1/t1.norm()
    var ut2 = t2/t2.norm()
    var m = Matrix(3,3)
    m.setcolumn(0, ut0)
    m.setcolumn(1, ut1)
    m.setcolumn(2, ut2)
    return m
}

fn CartToBary (x, v0, v1, v2) {
    return inv(MakeT(v0, v1, v2)) * (x-v0)
}

fn BaryToCart (lamCoords, v0, v1, v2) {
    return v0 + MakeT(v0, v1, v2) * lamCoords
}

// test

// var v0 = Matrix([1,0,0])
// var v1 = Matrix([2,0,0])
// var v2 = Matrix([2,1,0])

// var x = Matrix([1+2/3,1/3,0])

// print("Expect: [ 1.33333 0.471405 0 ]")
// print(CartToBary(x, v0 , v1, v2).transpose())
// print("")
// print("Expect: [ 1.66667 0.333333 0 ]")
// print(BaryToCart(CartToBary(x, v0 , v1, v2), v0 , v1, v2).transpose())

// var x = Matrix([1/2,1/4,1/2])

// var v0 = Matrix([0,0,0])
// var v1 = Matrix([1,0,1])
// var v2 = Matrix([0,1,0])

// print("")
// print("Expect: [ 0.707107 0.25 0 ]")
// print(CartToBary(x, v0 , v1, v2).transpose())
// print("")
// print("Expect: [ 0.5 0.25 0.5 ]")
// print(BaryToCart(CartToBary(x, v0 , v1, v2), v0 , v1, v2).transpose())