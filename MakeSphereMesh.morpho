// Create and save sphere meshes with different refinement levels
// By: Sam Hocking

import meshtools
import plot
import optimize

//Sphere
var cube = PolyhedronMesh(
    [[-0.5,-0.5,-0.5],
     [-0.5,0.5,-0.5],
     [0.5,-0.5,-0.5],
     [0.5,0.5,-0.5],
     [-0.5,-0.5,0.5],
     [-0.5,0.5,0.5],
     [0.5,-0.5,0.5],
     [0.5,0.5,0.5]],
    [[0,1,3,2],
     [0,1,5,4],
     [2,3,7,6],
     [1,3,7,5],
     [0,2,6,4],
     [4,5,7,6]])
cube.addgrade(1)
var problem = OptimizationProblem(cube)
var la=Area()
var lv = VolumeEnclosed()
problem.addenergy(la)
problem.addconstraint(lv)

var leq=EquiElement()
var reg = OptimizationProblem(cube)
reg.addenergy(leq)
var ropt = ShapeOptimizer(reg, cube)

var opt = ShapeOptimizer(problem, cube)
opt.stepsize = 0.001

var refmax = 4
for (refiter in 1..refmax) {
    for (i in 1..10) {
        print "-Regularize"
        ropt.linesearch(3)
        equiangulate(cube)
        opt.relax(100)
    }
    if (refiter==refmax) break
    var mr=MeshRefiner([cube])
    var refmap=mr.refine()
    for (el in [problem, opt, reg, ropt]) el.update(refmap)
    cube=refmap[cube]
}
opt.relax(1000)
var mesh = cube

mesh.save("sphere_${mesh.count(0)}_vertices.mesh")

Show(plotmesh(mesh))