// Substrate vertex gradient w/r/t particle energy functional

import meshtools
import plot
import functionals

import "morpho-particles.morpho" 
import "RandomPoints.morpho"
import "ParticleOptimizer.morpho"
import "LinAlgTools.morpho"

// 1. Build substrate mesh
// var mesh = Mesh("sphere_icosa_r_1_vol_4.18879_42_vertices.mesh")
// var mesh = Mesh("sphere_icosa_r_1_vol_4.18879_162_vertices.mesh")
var mesh = Mesh("sphere_icosa_r_1_vol_4.18879_642_vertices.mesh")
// var mesh = Mesh("sphere_icosa_r_1_vol_4.18879_2562_vertices.mesh")
// var mesh = Mesh("sphere_icosa_r_1_vol_4.18879_10242_vertices.mesh")
var a = 4
var b = 1
var c = 1
var M = Matrix([
    [a,0,0],
    [0,b,0],
    [0,0,c]
])
mesh.setvertexmatrix(M*mesh.vertexmatrix())
// mesh.addgrade(2)
// Show(plotmesh(mesh, grade=[2]))

// 2. Initialize Substrate object with substrate mesh argument
var s = Substrate(mesh)

var sproblem = OptimizationProblem(s.mesh)
var sarea=Area()
var svol = VolumeEnclosed()
sproblem.addenergy(sarea, prefactor=1)
sproblem.addconstraint(svol)

var sopt = ShapeOptimizer(sproblem, s.mesh)
sopt.stepsize=0.01
sopt.relax(2000)
print("substrate energy: ${sopt.totalenergy()}")
s.updateCoords()

// 9. Plot
Show(plotmesh(s.mesh, grade=[2]))

// 3. Build particle mesh
var Np = 500 // Number of particles
var ptsArr = GenRandomSphere(Np, r=4)
var mbb = MeshBuilder()
for (x in ptsArr) mbb.addvertex(x)
var particleMesh = mbb.build()

// 4. Initialize Particles object with particle mesh argument
var p = Particles(particleMesh)

// 5. Project particles onto substrate (Particles object method, Substrate object argument)
// p.project(s)
p.cleanProject(s, maxPoints=100, verbose=true)

var d = p.findDupes(p.points)
print("\n")
print("check:")
print("dupes : ${d.count()}")

var pproblem = OptimizationProblem(p.points)
var ppot = PairwisePotential(fn (r) 1/r, fn (r) -1/r^2)
// pproblem.addenergy(ppot)
pproblem.addenergy(ppot, prefactor=1)

var popt = ParticleOptimizer(pproblem, p, s)
popt.stepsize=0.0001
popt.relax(2000)

print("particles energy: ${popt.totalenergy()}")

// 8. Invoke ParticlePlotter object
var pp = ParticlePlotter()
pp.plot(p, s, substrateGrade=[2], points=true)

Show(plotmesh(p.points, grade=[0]))

