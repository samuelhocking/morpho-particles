// Particle optimizer
// By: Sam Hocking

import optimize

/*
PairwisePotential which separately asssesses the integrand on the reference particle coords
and numerically computes the gradient of that func w/r/t the reference substrate object's vertex coords.
Intended for use as an energy in the substrate problem.      
*/
class CMirrorPairwisePotential < Functional {
    init (CPairwiseObj, refParticlesObj, refSubstrateObj, gradStepsize=1e-6) {
        self.CPairwiseObj = CPairwiseObj
        self.refParticlesObj = refParticlesObj
        self.refSubstrateObj = refSubstrateObj
        self.gradStepsize = gradStepsize
        super.init(0)
    }

    // mesh is dummy arg
    // pass-thru call to C pairwise obj's integrand on the particle mesh
    integrand(mesh) {
        return self.CPairwiseObj.integrand(self.refParticlesObj.points)
    }

    // here, the gradient is numerically evaluated with respect to the substrate vertex coords
    gradient(mesh) {
        var nv = self.refSubstrateObj.mesh.count(0)
        var out = Matrix(3, nv)
        var I = Eye(3)

        for (i in 0...nv) {
            var grads = Matrix(3)
            for (j in 0..2) {
                // compute partial derivative of the total particle energy w/r/t x_j via centered finite difference

                var initLoc = self.refSubstrateObj.mesh.vertexmatrix().column(i).clone()
                var dir = self.gradStepsize*I.column(j)

                // take a gradStepsize step in the e_j basis direction
                self.refSubstrateObj.mesh.vertexmatrix().setcolumn(i, initLoc + dir)
                // parallel transport the particles
                self.refParticlesObj.updateCartesianCoords(self.refSubstrateObj)
                var fplus = self.integrand(nil).sum() // evaluate particle energy at updated substrate vertex coords

                // take a 2*gradStepsize step in the -e_j basis direction
                self.refSubstrateObj.mesh.vertexmatrix().setcolumn(i, initLoc - dir)
                // parallel transport the particles
                self.refParticlesObj.updateCartesianCoords(self.refSubstrateObj)
                var fminus = self.integrand(nil).sum() // evaluate particle energy at updated substrate vertex coords
                // print("${i}, ${j}")
                // print(fplus)
                // print(fminus)

                // take a gradStepsize step in the e_j basis direction (to get back to the original location)
                self.refSubstrateObj.mesh.vertexmatrix().setcolumn(i, initLoc)
                // parallel transport the particles
                self.refParticlesObj.updateCartesianCoords(self.refSubstrateObj)

                grads[j] = (fplus-fminus)/(2*self.gradStepsize)
            }
            out.setcolumn(i, grads)
        }
        return out
    }
}

/*
PairwisePotential which separately asssesses the integrand on the reference particle coords
and numerically computes the gradient of that func w/r/t the reference substrate object's vertex coords.
Intended for use as an energy in the substrate problem.      
*/
class MirrorPairwisePotential < Functional {
    init (func, refParticlesObj, refSubstrateObj, cutoff=nil, gradStepsize=1e-6) {
        self.func = func
        self.refParticlesObj = refParticlesObj
        self.refSubstrateObj = refSubstrateObj
        self.cutoff = cutoff
        self.gradStepsize = gradStepsize
        super.init(0)
    }

    // the mesh argument is typically the target of the optimizer. This becomes a dummy
    buildtree(mesh) {
        var vert = self.refParticlesObj.points.vertexmatrix()
        var nv = self.refParticlesObj.points.count()
        var pts = []
        for (i in 0...nv) {
        pts.append(vert.column(i))
        }
        return KDTree(pts)
    }

    // similarly, mesh becomes a useless dummy arg. The integrand is evaluated over the ref particle coords
    integrand(mesh) {
        var nv = self.refParticlesObj.points.count()
        var out = Matrix(nv)
        var vert = self.refParticlesObj.points.vertexmatrix()

        for (i in 0...nv) {
        var x = vert.column(i)
        for (j in i+1...nv) {
            var r = (x-vert.column(j)).norm()
            if (self.cutoff && r>self.cutoff) continue
            var f = self.func(r)
            out[i]+=0.5*f
            out[j]+=0.5*f
        }
        }
        return out
    }

    // here, the gradient is numerically evaluated with respect to the substrate vertex coords
    gradient(mesh) {
        var nv = self.refSubstrateObj.mesh.count(0)
        var out = Matrix(3, nv)
        var I = Eye(3)

        for (i in 0...nv) {
            var grads = Matrix(3)
            for (j in 0..2) {
                // compute partial derivative of the total particle energy w/r/t x_j via centered finite difference

                var initLoc = self.refSubstrateObj.mesh.vertexmatrix().column(i).clone()
                var dir = self.gradStepsize*I.column(j)

                // take a gradStepsize step in the e_j basis direction
                self.refSubstrateObj.mesh.vertexmatrix().setcolumn(i, initLoc + dir)
                // parallel transport the particles
                self.refParticlesObj.updateCartesianCoords(self.refSubstrateObj)
                var fplus = self.integrand(nil).sum() // evaluate particle energy at updated substrate vertex coords

                // take a 2*gradStepsize step in the -e_j basis direction
                self.refSubstrateObj.mesh.vertexmatrix().setcolumn(i, initLoc - dir)
                // parallel transport the particles
                self.refParticlesObj.updateCartesianCoords(self.refSubstrateObj)
                var fminus = self.integrand(nil).sum() // evaluate particle energy at updated substrate vertex coords
                // print("${i}, ${j}")
                // print(fplus)
                // print(fminus)

                // take a gradStepsize step in the e_j basis direction (to get back to the original location)
                self.refSubstrateObj.mesh.vertexmatrix().setcolumn(i, initLoc)
                // parallel transport the particles
                self.refParticlesObj.updateCartesianCoords(self.refSubstrateObj)

                grads[j] = (fplus-fminus)/(2*self.gradStepsize)
            }
            out.setcolumn(i, grads)
        }
        return out
    }
}

class ParticleOptimizer is ShapeOptimizer {
    init(particleProblem, particlesObj, substrateObj, maxForceNorm=nil) {
        super.init(particleProblem, particlesObj.points)
        self.particlesObj = particlesObj
        self.substrateObj = substrateObj
        self.maxForceNorm = maxForceNorm
        self.gradNorms = []
    }

    capForce(force) {
        if ((force.norm() < 1e-10) or (self.maxForceNorm == nil)) {
            return force
        } else {
            var norms = []
            var min_idx
            var max_idx
            var min_norm
            var max_norm
            for (i in 0...force.dimensions()[1]) {
                var n = force.column(i).norm()
                if (i == 0) {
                    min_idx = 0
                    max_idx = 0
                    min_norm = n
                    max_norm = n
                } else {
                    if (n < min_norm) {
                        min_norm = n
                        min_idx = i
                    }
                    if (n > min_norm) {
                        max_norm = n
                        max_idx = i
                    }
                }
                norms.append(n)
            }
            var factor = self.maxForceNorm/(self.stepsize*max_norm)
            if (factor < 1) {
                return force * factor
            } else {
                return force
            }
        }
    }

    totalforcewithconstraints() {
        var f = self.totalforce()
        var norms = []
        for (i in 0...f.dimensions()[1]) {
            norms.append(f.column(i).norm())
        }
        self.gradNorms.append(norms)
        var ff = self.capForce(f)
        self.initlocalconstraints() // Find which local constraints are active
        self.subtractlocalconstraints(f) // Remove projections onto local constraints
        self.subtractconstraints(f) // Remove projections onto constraint directions
        return f
    }

    /* Perform relaxation at fixed stepsize */
    relax(n) {
        if (self.energy.count()==0) self.energy.append(self.totalenergy())

        for (i in 0...n) {
            self.force = self.totalforcewithconstraints()
            self.step(self.stepsize)
            self.energy.append(self.totalenergy()) // Track the total energy
            self.report(i)
            if (self.hasconverged()) break
        }
        return self.energy
    }

    /* Take a step */
    step(stepsize) {
        // var target = self.gettarget()
        // var frc = self.force*stepsize*(-1) // Use the force
        var frc = self.force // Use the force
        if (!frc) return

        self.particlesObj.points.vertexmatrix().acc(-stepsize,frc)
        self.particlesObj.projectPoints(self.substrateObj)
        self.settarget(self.particlesObj.points.vertexmatrix())
    }
}

class SubstrateOptimizer is ShapeOptimizer {
    init(substrateProblem, substrateObj, maxForceNorm=nil) {
        super.init(substrateProblem, substrateObj.mesh)
        self.substrateProblem = substrateProblem
        self.substrateObj = substrateObj
        self.maxForceNorm = maxForceNorm
        self.gradNorms = []
    }

    capForce(force) {
        if ((force.norm() < 1e-10) or (self.maxForceNorm == nil)) {
            return force
        } else {
            var norms = []
            var min_idx
            var max_idx
            var min_norm
            var max_norm
            for (i in 0...force.dimensions()[1]) {
                var n = force.column(i).norm()
                if (i == 0) {
                    min_idx = 0
                    max_idx = 0
                    min_norm = n
                    max_norm = n
                } else {
                    if (n < min_norm) {
                        min_norm = n
                        min_idx = i
                    }
                    if (n > min_norm) {
                        max_norm = n
                        max_idx = i
                    }
                }
                norms.append(n)
            }
            var factor = self.maxForceNorm/(self.stepsize*max_norm)
            if (factor < 1) {
                return force * factor
            } else {
                return force
            }
        }
    }

    totalforce() {
        var energies = self.energies()
        var f
        if (!islist(energies) || energies.count()==0) print "Warning: Problem has no active functionals."
        var norms = []
        for (en in energies) {
            var grad = self.gradient(en)
            for (i in 0...grad.dimensions()[1]) {
                norms.append(grad.column(i).norm())
            }
            f+=grad
        }
        for (i in 0...f.dimensions()[1]) {
            norms.append(f.column(i).norm())
        }
        self.gradNorms.append(norms)
        return f
    }

    totalforcewithconstraints() {
        var f = self.totalforce()
        var ff = self.capForce(f)
        self.initlocalconstraints() // Find which local constraints are active
        self.subtractlocalconstraints(f) // Remove projections onto local constraints
        self.subtractconstraints(f) // Remove projections onto constraint directions
        return f
    }

    /* Perform relaxation at fixed stepsize */
    relax(n) {
        if (self.energy.count()==0) self.energy.append(self.totalenergy())

        for (i in 0...n) {
            self.force = self.totalforcewithconstraints()
            self.step(self.stepsize)
            self.energy.append(self.totalenergy()) // Track the total energy
            self.report(i)
            if (self.hasconverged()) break
        }
        return self.energy
    }

    /* Take a step */
    step(stepsize) {
        var target = self.gettarget()
        var frc = self.force // Use the force

        if (!frc) return

        target.acc(-stepsize, frc) // Take a step

        self.initlocalconstraints()
        self.reprojectlocalconstraints() // Reproject onto local constraints
        self.reprojectconstraints() // Push back onto constraints
        self.settarget(self.substrateObj.mesh.vertexmatrix())
    }
}