// LinAlgTools
// By: Sam Hocking

//function to return cross product of a and b vectors
fn cross(a, b) {
    return Matrix([ a[1]*b[2]-a[2]*b[1],
                    a[2]*b[0]-a[0]*b[2],
                    a[0]*b[1]-a[1]*b[0] ])
}

//SVM-style classification function: returns sign of dot product of a and b vectors, given some numerical tolerance threshold
fn classifyInner(a=nil, b=nil, threshold=1e-8) {
    var dot = a.inner(b)/(a.norm()*b.norm())
    if (dot > threshold) {
        return 1
    } else if (abs(dot) <= threshold) {
        return 0
    } else {
        return -1
    }
}

// wrapped version of classifyInner that returns only 1 or -1 (no 0)
fn hardClassifyInner(a=nil, b=nil, threshold=1e-8) {
    var res = classifyInner(a=a, b=b, threshold=threshold)
    if (res >= 0) {
        return 1
    } else {
        return -1
    }
}

// returns 1 if a and b vectors are parallel in the same direction, -1 if parallel in opposite directions, and 0 otherwise
fn classifyParallel(a=nil, b=nil, threshold=1e-8) {
    var dot = a.inner(b)/(a.norm()*b.norm())
    if (dot > 1-threshold) {
        return 1
    } else if (dot < -1+threshold) {
        return -1
    } else {
        return 0
    }
}

// project vector a onto vector b
// aka "the component of a along b"
fn a_proj_b(a=nil, b=nil) {
    return a.inner(b)/b.inner(b)*b
}

// "reverse" projection
// remove projection of a onto b from a
// returns a vector perpendicular to b, in the same plane as a
fn a_remove_b(a=nil, b=nil, normalize=false) {
    var v = a - a.inner(b)/b.inner(b)*b
    if ((normalize == true) && (v.norm()>0)) {
        return v/v.norm()
    } else {
        return v
    }
}