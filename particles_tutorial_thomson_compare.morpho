import meshtools
import plot
import optimize
import functionals

import "morpho-particles.morpho" 
import "RandomPoints.morpho"

// 1. Build substrate mesh
// var m = Mesh("sphere_r_0.62035_vol_1_194_vertices.mesh")
// var m = Mesh("sphere_r_0.62035_vol_1_770_vertices.mesh")
// var m = Mesh("sphere_r_1_vol_4.18879_194_vertices.mesh")
var m = Mesh("sphere_r_1_vol_4.18879_770_vertices.mesh")

// 2. Initialize Substrate object with substrate mesh argument
var s = Substrate(m)

// 3. Build particle mesh
var Np = 100 // Number of particles
var ptsArr = GenRandomSphere(Np, r=2)
var mbb = MeshBuilder()
for (x in ptsArr) mbb.addvertex(x)
var particleMesh = mbb.build()

// 4. Initialize Particles object with particle mesh argument
var p = Particles(particleMesh)

// 5. Project particles onto substrate (Particles object method, Substrate object argument)
p.project(s)

// 6. Define Force object
var f = ElectrostaticPairwise()

// 7. Move particles along substrate by applying the force (Particles object method, Substrate and Force object arguments)
// p.moveAllLoop(s, f, 10000, stepsize=0.00001, stepQuiet=true, loopQuiet=true)
p.moveOnebyOneLoop(s, f, 1000, stepsize=0.0001, stepQuiet=true, loopQuiet=true)

// 8. Invoke ParticlePlotter object
var pp = ParticlePlotter()

// 9. Plot
pp.plot(p, s, substrateGrade=[2], points=true)

// 10. Execute conventional Thomson solution

// Create the mesh, which consists of Np random points each representing
// a charge on the unit sphere.
var build = MeshBuilder()
for (i in 1..Np) {
  var x = Matrix([2*random()-1, 2*random()-1, 2*random()-1])
  x/=x.norm() // Project onto unit sphere
  build.addvertex(x)
}
var mesh = build.build() // Tell the MeshBuilder to build the mesh

// Specify the problem
var problem = OptimizationProblem(mesh)

// The particle repel one another by a Coulomb potential.
// We supply the potential and it's derivative wrt r as anonymous functions.
var lv = PairwisePotential(fn (r) 1/r, fn (r) -1/r^2)
problem.addenergy(lv)

// Constrain the particles on the unit sphere via a level set constraint.
// The level set function and its gradient are supplied as anonymous functions.
var lsph = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-1, fn (x,y,z) Matrix([2*x, 2*y, 2*z]))
problem.addlocalconstraint(lsph)

// Set up the optimizer to optimize this problem wrt the mesh vertex positions.
var opt = ShapeOptimizer(problem, mesh)

// Choose a stepsize
opt.stepsize=0.01/sqrt(Np)

// Do a few iterations at fixed stepsize to move away from the initally random
// condition. [This helps condition the problem]
opt.relax(5)
// Now perform gradient descent
opt.conjugategradient(1000) // Perform up to 1000 iterations of direct gradient descent

// Visualize the results
var g = Graphics()
for (i in 0...mesh.count()) {
  // Display each particle as a sphere
  g.display(Sphere(mesh.vertexposition(i),1/sqrt(Np)))
}
Show(g) // Open up the viewer application

print("morpho-particles PairwisePotential energy")
print("${lv.total(p.points)}")

print("conventional PairwisePotential energy")
print("${lv.total(mesh)}")